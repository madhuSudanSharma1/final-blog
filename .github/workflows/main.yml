name: GitHub Actions For CI
run-name: ${{ github.actor }} is running a GitHub Actions workflow for CI

on: 
  pull_request:
    branches: [ "dev" ]

  push:
    branches: [ "dev" ]
    
jobs:

  #############################################
  ## Pull Request Jobs ‚Äì Only from feature/*
  #############################################

  commitlint:
    name: Lint Commits
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feature') && github.base_ref == 'dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Commitlint
        run: |
          npm install --save-dev @commitlint/cli @commitlint/config-conventional
      - name: Add commitlint config
        run: |
          echo "module.exports = {extends: ['@commitlint/config-conventional']};" > commitlint.config.js
      - name: Run Commitlint
        run: |
          git log origin/${{ github.base_ref }}..HEAD --pretty=format:"%s" | npx commitlint

  lint-all-services:
    name: Lint All Services
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feature') && github.base_ref == 'dev'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run full lint & security checks for all services
        run: |
          ROOT_DIR=$(git rev-parse --show-toplevel)

          echo "üîç Running frontend checks..."
          cd "$ROOT_DIR/frontend"
          # yarn install --frozen-lockfile
          # yarn tsc --noEmit
          # yarn lint
          # npm-audit-resolver --production --audit || true
          cd "$ROOT_DIR"

          echo "üîç Running backend1 checks..."
          cd "$ROOT_DIR/backend1"
          # yarn install --frozen-lockfile
          # yarn tsc --noEmit
          # yarn lint
          # npm-audit-resolver --production --audit || true
          cd "$ROOT_DIR"

          echo "üîç Running backend2 checks..."
          cd "$ROOT_DIR/backend2"
          # yarn install --frozen-lockfile
          # yarn tsc --noEmit
          # yarn lint
          # npm-audit-resolver --production --audit || true
          cd "$ROOT_DIR"

          echo "‚úÖ All services passed lint and security checks."


  notify-slack:
    name: Notify Slack on PR
    if: github.event_name == 'pull_request' && startsWith(github.head_ref, 'feature') && github.base_ref == 'dev'
    needs: [commitlint, lint-all-services]
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          payload: |
            {
              "text": ":rocket: A new Pull Request was created by *${{ github.actor }}* targeting `dev` branch.\n<${{ github.event.pull_request.html_url }}|View PR>"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #############################################
  ## Push to Dev ‚Üí Docker Build & Push
  #############################################

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Set Docker image tag
        id: set
        run: |
          if [[ "${GITHUB_REF}" =~ ^refs/tags/ ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            echo "tag=${VERSION}" >> $GITHUB_OUTPUT
            echo "latest=latest" >> $GITHUB_OUTPUT
          else
            SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-6)
            echo "tag=dev-${SHORT_SHA}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Lint & security checks (frontend)
        run: |
          ROOT_DIR=$(git rev-parse --show-toplevel)
          echo "Linting frontend code..."
          cd "$ROOT_DIR/frontend"
          # yarn install --frozen-lockfile
          # yarn lint
          # yarn tsc --noEmit
          # npm-audit-resolver --production --audit || true
          cd "$ROOT_DIR"

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/frontend:${{ steps.set.outputs.tag }}

      - name: Lint & security checks (backend1)
        run: |
          ROOT_DIR=$(git rev-parse --show-toplevel)
          echo "Linting backend1 code..."
          cd "$ROOT_DIR/backend1"
          # yarn install --frozen-lockfile
          # yarn lint
          # yarn tsc --noEmit
          # npm-audit-resolver --production --audit || true
          cd "$ROOT_DIR"

      - name: Build and push backend1 Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend1
          file: ./backend1/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backend1:${{ steps.set.outputs.tag }}

      - name: Lint & security checks (backend2)
        run: |
          ROOT_DIR=$(git rev-parse --show-toplevel)
          echo "Linting backend2 code..."
          cd "$ROOT_DIR/backend2"
          # yarn install --frozen-lockfile
          # yarn lint
          # yarn tsc --noEmit
          # npm-audit-resolver --production --audit || true
          cd "$ROOT_DIR"

      - name: Build and push backend2 Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend2
          file: ./backend2/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/backend2:${{ steps.set.outputs.tag }}
